webpackHotUpdate(0,{

/***/ 13:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {/* REACT HOT LOADER */ if (true) { (function () { var ReactHotAPI = __webpack_require__(5), RootInstanceProvider = __webpack_require__(6), ReactMount = __webpack_require__(4), React = __webpack_require__(0); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.userSignIn = undefined;\nexports.validateToken = validateToken;\nexports.signOutCurrentUser = signOutCurrentUser;\nexports.getStoreOrders = getStoreOrders;\nexports.getCurrentOrder = getCurrentOrder;\nexports.getCurrentStore = getCurrentStore;\nexports.updateOrder = updateOrder;\nexports.updateCustomer = updateCustomer;\nexports.createStore = createStore;\nexports.getTailorList = getTailorList;\nexports.updateStore = updateStore;\nexports.getCompanies = getCompanies;\nexports.createShipment = createShipment;\nexports.getCustomerMeasurements = getCustomerMeasurements;\nexports.createCustomerMeasurements = createCustomerMeasurements;\nexports.getNewOrders = getNewOrders;\nexports.getOrderAndMessagesCount = getOrderAndMessagesCount;\nexports.getConversations = getConversations;\nexports.getMessages = getMessages;\nexports.createMessage = createMessage;\nexports.updateMessage = updateMessage;\nexports.submitOrder = submitOrder;\nexports.setConfirmedNewOrder = setConfirmedNewOrder;\nexports.resetCart = resetCart;\nexports.updateCartShipTo = updateCartShipTo;\nexports.updateCartNotes = updateCartNotes;\nexports.updateCartCustomerInfo = updateCartCustomerInfo;\nexports.removeGarmentFromCart = removeGarmentFromCart;\nexports.addGarmentToCart = addGarmentToCart;\nexports.setMessages = setMessages;\nexports.setConversations = setConversations;\nexports.setNewOrders = setNewOrders;\nexports.setCustomerMeasurements = setCustomerMeasurements;\nexports.setCompanyList = setCompanyList;\nexports.setTailorList = setTailorList;\nexports.setCurrentUser = setCurrentUser;\nexports.setCurrentStore = setCurrentStore;\nexports.setStoreOrders = setStoreOrders;\nexports.setCurrentOrder = setCurrentOrder;\nexports.setItemTypes = setItemTypes;\n\nvar _axios = __webpack_require__(58);\n\nvar _axios2 = _interopRequireDefault(_axios);\n\nvar _setAuthToken = __webpack_require__(90);\n\nvar _setAuthToken2 = _interopRequireDefault(_setAuthToken);\n\nvar _setLocalStorage = __webpack_require__(482);\n\nvar _constants = __webpack_require__(18);\n\nvar _format = __webpack_require__(85);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar setTokens = function setTokens(res) {\n  if (!res.data.headers['access-token']) {\n    return;\n  }\n  var _res$data$headers = res.data.headers,\n      client = _res$data$headers.client,\n      uid = _res$data$headers.uid,\n      expiry = _res$data$headers.expiry;\n\n  var accessToken = res.data.headers['access-token'];\n  var AirTailorTokens = { accessToken: accessToken, client: client, uid: uid, expiry: expiry };\n  (0, _setAuthToken2.default)(AirTailorTokens);\n  (0, _setLocalStorage.setLocalStorageAuth)(AirTailorTokens);\n};\n\nvar resetTokens = function resetTokens() {\n  (0, _setAuthToken2.default)({});\n  (0, _setLocalStorage.setLocalStorageAuth)({});\n};\n\nvar userSignIn = exports.userSignIn = function userSignIn(email, password) {\n  var url = _constants.expressApi + '/sign_in';\n  var data = { email: email, password: password };\n  return function (dispatch) {\n    return _axios2.default.post(url, data).then(function (res) {\n      setTokens(res);\n      (0, _setLocalStorage.setLocalStorageUser)(res.data.body);\n      var _res$data$body = res.data.body,\n          id = _res$data$body.id,\n          email = _res$data$body.email,\n          store_id = _res$data$body.store_id,\n          roles = _res$data$body.roles,\n          uid = _res$data$body.uid;\n\n      dispatch(setCurrentUser({ id: id, email: email, store_id: store_id, roles: roles }));\n    }).catch(function (err) {\n      console.log(err);\n    });\n  };\n};\n\nfunction validateToken() {\n  var url = _constants.expressApi + '/validate_token';\n  return _axios2.default.post(url);\n}\n\nfunction signOutCurrentUser() {\n  var url = _constants.expressApi + '/sign_out';\n  return function (dispatch) {\n    delete localStorage.AirTailorTokens;\n    (0, _setAuthToken2.default)({});\n    dispatch(setCurrentUser({}), setCurrentStore({}));\n    window.location = '/';\n\n    return _axios2.default.post(url).then(function (res) {\n      console.log('signed out');\n    }).catch(function (err) {\n      console.log('error from signOutCurrentUser linke 75', err);\n    });\n  };\n}\n\nfunction getStoreOrders(store_id) {\n  var url = _constants.expressApi + '/stores/' + store_id + '/orders';\n  return function (dispatch) {\n    return _axios2.default.get(url).then(function (res) {\n      if (res.data.headers.client && res.data.headers.uid) {\n        setTokens(res);\n        (0, _setLocalStorage.setLocalStorageUser)(res.data.body);\n      } else {\n        // console.log('getStoreOrders - no new auth headers');\n      }\n      dispatch(setStoreOrders(res.data.body));\n    }).catch(function (err) {\n      console.log('error', err);\n    });\n  };\n}\n\nfunction getCurrentOrder(store_id, order_id) {\n  var url = _constants.expressApi + '/stores/' + store_id + '/orders/' + order_id;\n  return function (dispatch) {\n    return _axios2.default.get(url).then(function (res) {\n      if (res.data.headers.client && res.data.headers.uid) {\n        setTokens(res);\n        (0, _setLocalStorage.setLocalStorageUser)(res.data.body);\n      } else {\n        // console.log('getStoreOrders - no new auth headers');\n      }\n      dispatch(setCurrentOrder(res.data.body));\n    }).catch(function (err) {\n      console.log('error', err);\n    });\n  };\n}\n\nfunction getCurrentStore(store_id) {\n  var url = _constants.expressApi + '/stores/' + store_id;\n  return function (dispatch) {\n    return _axios2.default.post(url).then(function (res) {\n      if (res.data.headers.client && res.data.headers.uid) {\n        setTokens(res);\n        (0, _setLocalStorage.setLocalStorageUser)(res.data.body);\n      } else {\n        // console.log('getStoreOrders - no new auth headers');\n      }\n      var _res$data$body2 = res.data.body,\n          company_id = _res$data$body2.company_id,\n          city = _res$data$body2.city,\n          id = _res$data$body2.id,\n          name = _res$data$body2.name,\n          phone = _res$data$body2.phone,\n          primary_contact_id = _res$data$body2.primary_contact_id,\n          state = _res$data$body2.state,\n          street1 = _res$data$body2.street1,\n          street2 = _res$data$body2.street2,\n          zip = _res$data$body2.zip,\n          active_orders_count = _res$data$body2.active_orders_count,\n          late_orders_count = _res$data$body2.late_orders_count;\n\n      dispatch(setCurrentStore({ company_id: company_id, city: city, id: id, name: name, phone: phone, primary_contact_id: primary_contact_id, state: state, street1: street1, street2: street2, zip: zip, active_orders_count: active_orders_count, late_orders_count: late_orders_count }));\n    }).catch(function (err) {\n      debugger;\n    });\n  };\n}\n\nfunction updateOrder(data) {\n  var url = _constants.expressApi + '/stores/' + data.order.store_id + '/orders/' + data.order.id + '/edit';\n  return function (dispatch) {\n    return validateToken().then(setTokens).then(function () {\n      return _axios2.default.post(url, data).then(function (res) {\n        dispatch(setCurrentOrder(res.data.body));\n      }).catch(function (err) {\n        debugger;\n      });\n    });\n  };\n}\n\nfunction updateCustomer(data) {\n  var url = _constants.expressApi + '/customers/' + data.customer.id;\n  return _axios2.default.put(url, data);\n}\n\nfunction createStore(data) {\n  var url = _constants.expressApi + '/stores/';\n  return _axios2.default.post(url, data);\n}\n\nfunction getTailorList() {\n  var url = _constants.expressApi + '/tailors';\n  return function (dispatch) {\n    return validateToken().then(setTokens).then(function () {\n      return _axios2.default.get(url).then(function (res) {\n        dispatch(setTailorList(res.data.body));\n      }).catch(function (err) {\n        debugger;\n      });\n    });\n  };\n}\n\nfunction updateStore(data) {\n  var url = _constants.expressApi + '/stores/' + data.store.id;\n  return function (dispatch) {\n    return validateToken().then(setTokens).then(function () {\n      return _axios2.default.put(url, data).then(function (res) {\n        dispatch(setCurrentStore(res.data.body));\n      }).catch(function (err) {\n        debugger;\n      });\n    });\n  };\n}\n\nfunction getCompanies() {\n  var url = _constants.expressApi + '/companies';\n  return function (dispatch) {\n    return validateToken().then(setTokens).then(function () {\n      return _axios2.default.get(url).then(function (res) {\n        dispatch(setCompanyList(res.data.body));\n      }).catch(function (err) {\n        debugger;\n      });\n    });\n  };\n}\n\nfunction createShipment(data) {\n  var url = _constants.expressApi + '/shipments';\n  return _axios2.default.post(url, data);\n}\n\nfunction getCustomerMeasurements(data) {\n  var url = _constants.expressApi + '/customers/' + data.customer_id + '/measurements/last';\n  return function (dispatch) {\n    return validateToken().then(setTokens).then(function () {\n      return _axios2.default.get(url).then(function (res) {\n        debugger;\n        dispatch(setCustomerMeasurements(res.data.body));\n      }).catch(function (err) {\n        debugger;\n      });\n    });\n  };\n}\n\nfunction createCustomerMeasurements(measurement) {\n  var url = _constants.expressApi + '/customers/' + measurement.customer_id + '/measurements';\n  var data = { measurement: measurement };\n  return function (dispatch) {\n    return validateToken().then(setTokens).then(function () {\n      return _axios2.default.post(url, data).then(function (res) {\n        dispatch(setCustomerMeasurements(res.data.body));\n      }).catch(function (err) {\n        debugger;\n      });\n    });\n  };\n}\n\nfunction getNewOrders() {\n  var url = _constants.expressApi + '/new_orders';\n  return function (dispatch) {\n    return validateToken().then(setTokens).then(function () {\n      return _axios2.default.get(url).then(function (res) {\n        dispatch(setNewOrders(res.data.body));\n      }).catch(function (err) {\n        debugger;\n      });\n    });\n  };\n}\n\nfunction getOrderAndMessagesCount(store_id) {\n  var url = _constants.expressApi + '/stores/' + store_id + '/orders_and_messages_count';\n  return _axios2.default.get(url);\n}\n\nfunction getConversations(store_id) {\n  var url = _constants.expressApi + '/stores/' + store_id + '/conversations';\n  return function (dispatch) {\n    return validateToken().then(setTokens).then(function () {\n      return _axios2.default.get(url).then(function (res) {\n        dispatch(setConversations(res.data.body));\n        return res.data.body;\n      }).catch(function (err) {\n        debugger;\n      });\n    });\n  };\n}\n\nfunction getMessages(store_id, conversation_id) {\n  console.log('store_id', store_id, 'conversation_id', conversation_id);\n  var url = _constants.expressApi + '/stores/' + store_id + '/conversations/' + conversation_id;\n  return function (dispatch) {\n    return validateToken().then(setTokens).then(function () {\n      return _axios2.default.get(url).then(function (res) {\n        dispatch(setMessages(res.data.body.messages.reverse()));\n        return res.data.body;\n      }).catch(function (err) {\n        debugger;\n      });\n    });\n  };\n}\n\nfunction createMessage(message) {\n  var store_id = message.store_id,\n      conversation_id = message.conversation_id;\n\n  var url = _constants.expressApi + '/stores/' + store_id + '/conversations/' + conversation_id + '/messages';\n  return function (dispatch) {\n    return validateToken().then(setTokens).then(function () {\n      return _axios2.default.post(url, { message: message }).then(function (res) {\n        dispatch(setMessages(res.data.body.messages.reverse()));\n        return res;\n      }).catch(function (err) {\n        debugger;\n      });\n    });\n  };\n}\n\nfunction updateMessage(message) {\n  var store_id = message.store_id,\n      conversation_id = message.conversation_id,\n      id = message.id;\n\n  var url = _constants.expressApi + '/stores/' + store_id + '/conversations/' + conversation_id + '/messages/' + id;\n  return function (dispatch) {\n    return validateToken().then(setTokens).then(function () {\n      return _axios2.default.put(url, { message: message }).then(function (res) {\n        dispatch(setMessages(res.data.body.messages.reverse()));\n        return res;\n      }).catch(function (err) {\n        debugger;\n      });\n    });\n  };\n}\n\nfunction findOrCreateCustomer(customerInfo) {\n  var url = _constants.expressApi + '/customers/find_or_create';\n  return validateToken().then(setTokens).then(function () {\n    return _axios2.default.post(url, { customer: customerInfo });\n  });\n}\n\nfunction createOrder(order) {\n  var url = _constants.expressApi + '/orders';\n  return validateToken().then(setTokens).then(function () {\n    return _axios2.default.post(url, { order: order });\n  });\n}\n\nfunction getOrderWeight(cart) {\n  return cart.garments.reduce(function (prev, curr) {\n    return prev += curr.weight;\n  }, 0);\n}\n\nfunction getOrderTotal(cart) {\n  return cart.garments.reduce(function (prev, curr) {\n    return prev += curr.alterations.reduce(function (prev, curr) {\n      return prev += curr.price;\n    }, 0);\n  }, 0);\n}\n\nfunction submitOrder(props) {\n  var cart = props.cart,\n      currentStore = props.currentStore;\n  var customerInfo = props.cart.customerInfo;\n\n  return function (dispatch) {\n    return findOrCreateCustomer((0, _format.removeFalseyValuesFromObject)(customerInfo)).then(function (res) {\n      if (res.data.body.errors) {\n        console.log('errors', res.data.body.errors);\n      } else {\n        var customer_id = res.data.body.id;\n        var requester_id = currentStore.id;\n        var weight = getOrderWeight(cart);\n        var total = getOrderTotal(cart);\n        var source = 'React-Portal';\n        var garments = cart.garments;\n\n        var ship_to_store = cart.shipToStore;\n        var requester_notes = cart.notes;\n        var type = 'TailorOrder';\n\n        var order = {\n          customer_id: customer_id,\n          requester_id: requester_id,\n          weight: weight,\n          total: total,\n          garments: garments,\n          source: source,\n          requester_notes: requester_notes,\n          type: type,\n          ship_to_store: ship_to_store\n        };\n\n        return createOrder(order).then(function (res) {\n          return dispatch(setConfirmedNewOrder(res.data.body));\n        }).catch(function (err) {\n          debugger;\n        });\n      }\n    }).catch(function (err) {\n      console.log('create order error', err);\n    });\n  };\n}\n\n// actions\n\nfunction setConfirmedNewOrder(order) {\n  return {\n    type: _constants.SET_CONFIRMED_NEW_ORDER,\n    order: order\n  };\n}\n\nfunction resetCart() {\n  return {\n    type: _constants.RESET_CART,\n    cart: {}\n  };\n}\n\nfunction updateCartShipTo(boolean) {\n  return {\n    type: _constants.UPDATE_CART_SHIP_TO,\n    boolean: boolean\n  };\n}\n\nfunction updateCartNotes(notes) {\n  return {\n    type: _constants.UPDATE_CART_NOTES,\n    notes: notes\n  };\n}\n\nfunction updateCartCustomerInfo(customerInfo) {\n  return {\n    type: _constants.UPDATE_CART_CUSTOMER_INFO,\n    customerInfo: customerInfo\n  };\n}\n\nfunction removeGarmentFromCart(index) {\n  return {\n    type: _constants.REMOVE_GARMENT_FROM_CART,\n    index: index\n  };\n}\n\nfunction addGarmentToCart(garment) {\n  return {\n    type: _constants.ADD_GARMENT_TO_CART,\n    garment: garment\n  };\n}\n\nfunction setMessages(messages) {\n  return {\n    type: _constants.SET_MESSAGES,\n    messages: messages\n  };\n}\n\nfunction setConversations(conversations) {\n  return {\n    type: _constants.SET_CONVERSATIONS,\n    conversations: conversations\n  };\n}\n\nfunction setNewOrders(newOrders) {\n  return {\n    type: _constants.SET_NEW_ORDERS,\n    newOrders: newOrders\n  };\n}\n\nfunction setCustomerMeasurements(measurements) {\n  return {\n    type: 'SET_CUSTOMER_MEASUREMENTS',\n    measurements: measurements\n  };\n}\nfunction setCompanyList(companies) {\n  return {\n    type: _constants.SET_COMPANY_LIST,\n    companies: companies\n  };\n}\n\nfunction setTailorList(tailors) {\n  return {\n    type: _constants.SET_TAILOR_LIST,\n    tailors: tailors\n  };\n}\n\nfunction setCurrentUser(user) {\n  return {\n    type: _constants.SET_CURRENT_USER,\n    user: user\n  };\n}\nfunction setCurrentStore(store) {\n  return {\n    type: _constants.SET_CURRENT_STORE,\n    store: store\n  };\n}\n\nfunction setStoreOrders(orders) {\n  return {\n    type: _constants.SET_STORE_ORDERS,\n    orders: orders\n  };\n}\n\nfunction setCurrentOrder(order) {\n  return {\n    type: _constants.SET_CURRENT_ORDER,\n    order: order\n  };\n}\n\nfunction setItemTypes(itemTypes) {\n  return {\n    type: _constants.SET_ITEM_TYPES,\n    itemTypes: itemTypes\n  };\n}\n\n/* REACT HOT LOADER */ }).call(this); } finally { if (true) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = __webpack_require__(7); if (makeExportsHot(module, __webpack_require__(0))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error(\"Cannot apply hot update to \" + \"index.js\" + \": \" + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)(module)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ })

})