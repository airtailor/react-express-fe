{"version":3,"sources":["webpack:///./client/components/stores/StoresNew.js","webpack:///./client/components/FormField.js?991d****","webpack:///./client/components/FormSelect.js?638f****","webpack:///./client/components/orders/orderForms/SelectTailor.js?a41b**"],"names":["mapStateToProps","companies","store","companyList","userRoles","mapDispatchToProps","getCompanies","setLoader","removeLoader","setGrowler","dispatch","StoresNew","updateStoreState","field","value","setState","updateAddressState","address","state","emptyParamsPresent","missingStoreParams","hasAllParams","missingAddressParams","missingDefaultTailor","retailerMissingDefaultTailor","handleSubmit","e","preventDefault","props","missingParams","then","errors","res","data","body","initialStateObject","kind","message","catch","console","log","err","errorString","company_id","name","primary_contact_id","phone","type","street","street_two","city","state_province","zip_code","default_tailor_id","tailorId","admin","obj","Object","keys","filter","k","submit","renderTailorSelect","propTypes","array","isRequired","func","FormField","title","fieldName","onChange","className","inputType","target","addPleaseSelect","id","concat","options","FormSelect","selectOptions","renderOptions","map","option","index","tailors","tailorList","getTailorList","SelectTailor","headerText","provider_id","string"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;AAEA;;AAOA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;AAEA,IAAMA,kBAAkB,SAAlBA,eAAkB,QAAS;AAC/B,SAAO;AACLC,eAAWC,MAAMC,WADZ;AAELC,eAAWF,MAAME;AAFZ,GAAP;AAID,CALD;;AAOA,IAAMC,qBAAqB,SAArBA,kBAAqB,WAAY;AACrC,SAAO,+BACL;AACEC,uCADF;AAEEC,iCAFF;AAGEC,uCAHF;AAIEC;AAJF,GADK,EAOLC,QAPK,CAAP;AASD,CAVD;;IAYMC,S;;;AACJ,uBAAc;AAAA;;AAAA;;AAAA,UAoDdC,gBApDc,GAoDK,UAACC,KAAD,EAAQC,KAAR,EAAkB;AACnC,YAAKC,QAAL,qBAAiBF,KAAjB,EAAyBC,KAAzB;AACD,KAtDa;;AAAA,UAwDdE,kBAxDc,GAwDO,UAACH,KAAD,EAAQC,KAAR,EAAkB;AAAA,UAC7BG,OAD6B,GACjB,MAAKC,KADY,CAC7BD,OAD6B;;AAErCA,cAAQJ,KAAR,IAAiBC,KAAjB;AACA,YAAKC,QAAL,CAAc,EAAEE,gBAAF,EAAd;AACD,KA5Da;;AAAA,UA2EdE,kBA3Ec,GA2EO,YAAM;AACzB,UAAMjB,QAAQ,MAAKgB,KAAnB;AADyB,UAEjBD,OAFiB,GAELf,KAFK,CAEjBe,OAFiB;;AAGzB,UAAMG,qBAAqB,CAAC,MAAKC,YAAL,CAAkBnB,KAAlB,CAA5B;AACA,UAAMoB,uBAAuB,CAAC,MAAKD,YAAL,CAAkBJ,OAAlB,CAA9B;AACA,UAAMM,uBAAuB,CAAC,MAAKC,4BAAL,EAA9B;AACA,aAAOJ,sBAAsBE,oBAAtB,IAA8CC,oBAArD;AACD,KAlFa;;AAAA,UAoFdE,YApFc,GAoFC,aAAK;AAClBC,QAAEC,cAAF;AADkB,wBAE8B,MAAKC,KAFnC;AAAA,UAEVrB,SAFU,eAEVA,SAFU;AAAA,UAECC,YAFD,eAECA,YAFD;AAAA,UAEeC,UAFf,eAEeA,UAFf;;AAGlB,UAAMoB,gBAAgB,MAAKV,kBAAL,EAAtB;;AAEA,UAAI,CAACU,aAAL,EAAoB;AAClB,YAAM3B,QAAQ,MAAKgB,KAAnB;AACAX;AACA,kCAAY,EAAEL,YAAF,EAAZ,EACG4B,IADH,CACQ,eAAO;AACXtB;;AAEA,cAAMuB,SAASC,IAAIC,IAAJ,CAASC,IAAT,CAAcH,MAA7B;AACA,cAAI,uBAAQA,MAAR,CAAJ,EAAqB;AACnB,kBAAKhB,QAAL,CAAc,MAAKoB,kBAAL,EAAd;;AAEA1B,uBAAW;AACT2B,oBAAM,SADG;AAETC,uBAAS;AAFA,aAAX;AAID,WAPD,MAOO;AACL,gBAAIN,OAAO,iBAAP,CAAJ,EAA+B;AAC7BtB,yBAAW;AACT2B,sBAAM,SADG;AAETC,yBAAS;AAFA,eAAX;AAID;AACF;AACF,SApBH,EAqBGC,KArBH,CAqBS;AAAA,iBAAOC,QAAQC,GAAR,CAAYC,GAAZ,CAAP;AAAA,SArBT;AAsBD,OAzBD,MAyBO;AACL,YAAMC,cAAc,4CAApB;AACAjC,mBAAW,EAAE2B,MAAM,SAAR,EAAmBC,SAASK,WAA5B,EAAX;AACD;AACF,KAtHa;;AAEZ,UAAKxB,KAAL,GAAa,MAAKiB,kBAAL,EAAb;AAFY;AAGb;;;;yCAUoB;AACnB,aAAO;AACLQ,oBAAY,EADP;AAELC,cAAM,EAFD;AAGLC,4BAAoB,EAHf;AAILC,eAAO,EAJF;AAKLC,cAAM,EALD;AAML9B,iBAAS;AACP+B,kBAAQ,EADD;AAEPC,sBAAY,EAFL;AAGPC,gBAAM,EAHC;AAIPC,0BAAgB,EAJT;AAKPC,oBAAU;AALH,SANJ;AAaLC,2BAAmB;AAbd,OAAP;AAeD;;;wCAEmB;AAAA;;AAClB,WAAKzB,KAAL,CAAWrB,SAAX;AACA,WAAKqB,KAAL,CACGtB,YADH,GAEGwB,IAFH,CAEQ;AAAA,eAAM,OAAKF,KAAL,CAAWpB,YAAX,EAAN;AAAA,OAFR,EAGG8B,KAHH,CAGS;AAAA,eAAOC,QAAQC,GAAR,CAAYC,GAAZ,CAAP;AAAA,OAHT;AAID;;;uCAEkBa,Q,EAAUC,K,EAAO;AAClC,UAAIA,KAAJ,EAAW;AACT,eACE;AACE,oBAAU,KAAK3C,gBADjB;AAEE,qBAAU,mBAFZ;AAGE,sBAAW,oBAHb;AAIE,oBAAU0C;AAJZ,UADF;AAQD;AACF;;;iCAYYE,G,EAAK;AAChB,aAAO,uBAAQC,OAAOC,IAAP,CAAYF,GAAZ,EAAiBG,MAAjB,CAAwB;AAAA,eAAKC,KAAK,EAAV;AAAA,OAAxB,CAAR,CAAP;AACD;;;mDAE8B;AAAA,mBACO,KAAK1C,KADZ;AAAA,UACrB6B,IADqB,UACrBA,IADqB;AAAA,UACfM,iBADe,UACfA,iBADe;;AAE7B,UAAIN,SAAS,UAAT,IAAuBM,oBAAoB,CAA/C,EAAkD;AAChD,eAAO,IAAP;AACD,OAFD,MAEO;AACL,eAAO,KAAP;AACD;AACF;;;6BA+CQ;AAAA;;AAAA,mBACqC,KAAKzB,KAD1C;AAAA,UACC3B,SADD,UACCA,SADD;AAAA,UACyBsD,KADzB,UACYnD,SADZ,CACyBmD,KADzB;AAAA,oBASH,KAAKrC,KATF;AAAA,UAGLyB,UAHK,WAGLA,UAHK;AAAA,UAILI,IAJK,WAILA,IAJK;AAAA,UAKLH,IALK,WAKLA,IALK;AAAA,UAMLE,KANK,WAMLA,KANK;AAAA,oCAOL7B,OAPK;AAAA,UAOM+B,MAPN,mBAOMA,MAPN;AAAA,UAOcC,UAPd,mBAOcA,UAPd;AAAA,UAO0BC,IAP1B,mBAO0BA,IAP1B;AAAA,UAOgCC,cAPhC,mBAOgCA,cAPhC;AAAA,UAOgDC,QAPhD,mBAOgDA,QAPhD;AAAA,UAQLC,iBARK,WAQLA,iBARK;;;AAWP,UAAMC,WAAWD,oBAAoBA,iBAApB,GAAwC,EAAzD;;AAEA,UAAMzC,mBAAmB,KAAKA,gBAA9B;AACA,UAAMI,qBAAqB,KAAKA,kBAAhC;AACA,UAAM6C,SAAS,SAATA,MAAS;AAAA,eAAK,OAAKpC,YAAL,CAAkBC,CAAlB,CAAL;AAAA,OAAf;;AAEA,UAAI,uBAAQzB,SAAR,CAAJ,EAAwB;AACtB,eAAO,0CAAP;AACD,OAFD,MAEO;AACL,eACE;AAAA;AAAA;AACE;AAAA;AAAA,cAAM,UAAU4D,MAAhB;AACE;AACE,qBAAOjB,IADT;AAEE,yBAAW,MAFb;AAGE,qBAAO,QAHT;AAIE,wBAAUhC;AAJZ,cADF;AAQE;AACE,qBAAOkC,KADT;AAEE,yBAAW,OAFb;AAGE,qBAAO,SAHT;AAIE,wBAAUlC;AAJZ,cARF;AAeE;AACE,qBAAOoC,MADT;AAEE,yBAAW,QAFb;AAGE,qBAAO,SAHT;AAIE,wBAAUhC;AAJZ,cAfF;AAsBE;AACE,qBAAOiC,UADT;AAEE,yBAAW,YAFb;AAGE,qBAAO,OAHT;AAIE,wBAAUjC;AAJZ,cAtBF;AA6BE;AACE,qBAAOkC,IADT;AAEE,yBAAW,MAFb;AAGE,qBAAO,OAHT;AAIE,wBAAUlC;AAJZ,cA7BF;AAoCE;AACE,qBAAOmC,cADT;AAEE,yBAAW,gBAFb;AAGE,qBAAO,QAHT;AAIE,wBAAUnC;AAJZ,cApCF;AA2CE;AACE,qBAAOoC,QADT;AAEE,yBAAW,UAFb;AAGE,qBAAO,MAHT;AAIE,wBAAUpC;AAJZ,cA3CF;AAkDE;AACE,qBAAO2B,UADT;AAEE,uBAAS1C,SAFX;AAGE,yBAAW,YAHb;AAIE,qBAAO,UAJT;AAKE,wBAAUW;AALZ,cAlDF;AA0DE;AACE,qBAAOmC,IADT;AAEE,4CAFF;AAGE,yBAAW,MAHb;AAIE,qBAAO,aAJT;AAKE,wBAAUnC;AALZ,cA1DF;AAkEG,iBAAKkD,kBAAL,CAAwBR,QAAxB,EAAkCC,KAAlC,CAlEH;AAoEE;AACE,oBAAK,QADP;AAEE,yBAAU,cAFZ;AAGE,qBAAM;AAHR;AApEF;AADF,SADF;AA8ED;AACF;;;;;;AA5NG5C,S,CAMGoD,S,GAAY;AACjB9D,aAAW,oBAAU+D,KAAV,CAAgBC,UADV,EACsB;AACvC3D,gBAAc,oBAAU4D,IAAV,CAAeD,UAFZ,EAEwB;AACzC1D,aAAW,oBAAU2D,IAAV,CAAeD,UAHT,EAGqB;AACtCzD,gBAAc,oBAAU0D,IAAV,CAAeD,UAJZ,EAIwB;AACzCxD,cAAY,oBAAUyD,IAAV,CAAeD,UALV,CAKsB;AALtB,C;kBAyNN,yBAAQjE,eAAR,EAAyBK,kBAAzB,EACb,iCAAkBM,SAAlB,CADa,C;;;;;;;;;;;;;;ACtQf;;;;;;AAEA,IAAMwD,YAAY,SAAZA,SAAY,QAAS;AAAA,MACjBC,KADiB,GACsCxC,KADtC,CACjBwC,KADiB;AAAA,MACVtD,KADU,GACsCc,KADtC,CACVd,KADU;AAAA,MACHuD,SADG,GACsCzC,KADtC,CACHyC,SADG;AAAA,MACQC,SADR,GACsC1C,KADtC,CACQ0C,QADR;AAAA,MACkBC,SADlB,GACsC3C,KADtC,CACkB2C,SADlB;AAAA,MAC6BxB,IAD7B,GACsCnB,KADtC,CAC6BmB,IAD7B;;AAEzB,MAAMyB,YAAYzB,OAAOA,IAAP,GAAc,MAAhC;AACA,SACE;AAAA;AAAA;AACE;AAAA;AAAA,QAAO,WAAU,YAAjB;AAA+BqB;AAA/B,KADF;AAEE,6CAFF;AAGE;AACE,YAAMI,SADR;AAEE,iCAAyBD,SAF3B;AAGE,YAAK,IAHP;AAIE,aAAOzD,KAJT;AAKE,gBAAU;AAAA,eAAKwD,UAASD,SAAT,EAAoB3C,EAAE+C,MAAF,CAAS3D,KAA7B,CAAL;AAAA;AALZ,MAHF;AAUE,6CAVF;AAWE;AAXF,GADF;AAeD,CAlBD;;kBAoBeqD,S;;;;;;;;;;;;;;ACtBf;;;;;;AAEA,IAAMO,kBAAkB,SAAlBA,eAAkB,UAAW;AACjC,SAAO,CAAC,EAAEC,IAAI,EAAN,EAAU/B,MAAM,eAAhB,EAAD,EAAoCgC,MAApC,CAA2CC,OAA3C,CAAP;AACD,CAFD;;AAIA,IAAMC,aAAa,SAAbA,UAAa,QAAS;AAC1B,MAAMC,gBAAgBL,gBAAgB9C,MAAMiD,OAAtB,CAAtB;AACA,SACE;AAAA;AAAA;AACE;AAAA;AAAA;AAAQjD,YAAMwC;AAAd,KADF;AAEE,6CAFF;AAGE;AAAA;AAAA;AACE,eAAOxC,MAAMd,KADf;AAEE,kBAAU;AAAA,iBAAKc,MAAM0C,QAAN,CAAe1C,MAAMyC,SAArB,EAAgC3C,EAAE+C,MAAF,CAAS3D,KAAzC,CAAL;AAAA;AAFZ;AAIGkE,oBAAcD,aAAd;AAJH,KAHF;AASE,6CATF;AAUE;AAVF,GADF;AAcD,CAhBD;;AAkBA,IAAMC,gBAAgB,SAAhBA,aAAgB,UAAW;AAC/B,SAAOH,QAAQI,GAAR,CAAY,UAACC,MAAD,EAASC,KAAT,EAAmB;AACpC,WACE;AAAA;AAAA,QAAQ,KAAKA,KAAb,EAAoB,OAAOD,OAAOP,EAAlC;AACGO,aAAOtC;AADV,KADF;AAKD,GANM,CAAP;AAOD,CARD;;kBAUekC,U;;;;;;;;;;;;;;;;AClCf;;;;AACA;;AACA;;AACA;;;;AACA;;;;AAEA;;AAEA;;;;;;;;;;;;AAEA,IAAM9E,kBAAkB,SAAlBA,eAAkB,QAAS;AAC/B,SAAO;AACLoF,aAASlF,MAAMmF;AADV,GAAP;AAGD,CAJD;;AAMA,IAAMhF,qBAAqB,SAArBA,kBAAqB,WAAY;AACrC,SAAO,+BAAmB,EAAEiF,qCAAF,EAAnB,EAAsC5E,QAAtC,CAAP;AACD,CAFD;;IAIM6E,Y;;;;;;;;;;;wCAQgB;AAClB,WAAK3D,KAAL,CAAW0D,aAAX,GAA2BhD,KAA3B,CAAiC;AAAA,eAAOC,QAAQC,GAAR,CAAYC,GAAZ,CAAP;AAAA,OAAjC;AACD;;;6BAEQ;AAAA,mBASH,KAAKb,KATF;AAAA,UAELwD,OAFK,UAELA,OAFK;AAAA,UAGLd,QAHK,UAGLA,QAHK;AAAA,UAILhB,QAJK,UAILA,QAJK;AAAA,UAKL7B,YALK,UAKLA,YALK;AAAA,oCAML4C,SANK;AAAA,UAMLA,SANK,oCAMO,aANP;AAAA,gCAOLD,KAPK;AAAA,UAOLA,KAPK,gCAOG,cAPH;AAAA,qCAQLoB,UARK;AAAA,UAQLA,UARK,qCAQQ,eARR;;;AAWP,UAAI,uBAAQJ,OAAR,CAAJ,EAAsB;AACpB,eAAO,0CAAP;AACD;;AAED,aACE;AAAA;AAAA,UAAK,WAAW,cAAhB;AACE;AAAA;AAAA;AAAKI;AAAL,SADF;AAEE;AACE,iBAAOlC,QADT;AAEE,mBAAS8B,OAFX;AAGE,qBAAWf,SAHb;AAIE,iBAAOD,KAJT;AAKE,oBAAUE;AALZ;AAFF,OADF;AAYD;;;;;;AAvCGiB,Y,CACGxB,S,GAAY;AACjBqB,WAAS,oBAAUpB,KAAV,CAAgBC,UADR,EACoB;AACrCqB,iBAAe,oBAAUpB,IAAV,CAAeD,UAFb,EAEyB;AAC1CK,YAAU,oBAAUJ,IAAV,CAAeD,UAHR,EAGoB;AACrCwB,eAAa,oBAAUC,MAJN,CAIc;AAJd,C;kBAyCN,yBAAQ1F,eAAR,EAAyBK,kBAAzB,EAA6CkF,YAA7C,C","file":"11.8e17dbfc1bac700a027c.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport {\n  getCompanies,\n  createStore,\n  setLoader,\n  removeLoader,\n  setGrowler,\n} from '../../actions';\nimport { storeTypes } from '../../utils/constants';\n\nimport FormField from '../FormField';\nimport FormSelect from '../FormSelect';\nimport PropTypes from 'prop-types';\nimport WithSectionHeader from '../HOC/WithSectionHeader';\nimport isEmpty from 'lodash/isEmpty';\nimport SelectTailor from '../orders/orderForms/SelectTailor';\n\nconst mapStateToProps = store => {\n  return {\n    companies: store.companyList,\n    userRoles: store.userRoles,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators(\n    {\n      getCompanies,\n      setLoader,\n      removeLoader,\n      setGrowler,\n    },\n    dispatch\n  );\n};\n\nclass StoresNew extends Component {\n  constructor() {\n    super();\n    this.state = this.initialStateObject();\n  }\n\n  static propTypes = {\n    companies: PropTypes.array.isRequired, // mapStateToProps\n    getCompanies: PropTypes.func.isRequired, // mapDispatchToProps\n    setLoader: PropTypes.func.isRequired, // mapDispatchToProps\n    removeLoader: PropTypes.func.isRequired, // mapDispatchToProps\n    setGrowler: PropTypes.func.isRequired, // mapDispatchToProps\n  };\n\n  initialStateObject() {\n    return {\n      company_id: '',\n      name: '',\n      primary_contact_id: '',\n      phone: '',\n      type: '',\n      address: {\n        street: '',\n        street_two: '',\n        city: '',\n        state_province: '',\n        zip_code: '',\n      },\n      default_tailor_id: 0,\n    };\n  }\n\n  componentDidMount() {\n    this.props.setLoader();\n    this.props\n      .getCompanies()\n      .then(() => this.props.removeLoader())\n      .catch(err => console.log(err));\n  }\n\n  renderTailorSelect(tailorId, admin) {\n    if (admin) {\n      return (\n        <SelectTailor\n          onChange={this.updateStoreState}\n          fieldName=\"default_tailor_id\"\n          headerText=\"Set Default Tailor\"\n          tailorId={tailorId}\n        />\n      );\n    }\n  }\n\n  updateStoreState = (field, value) => {\n    this.setState({ [field]: value });\n  };\n\n  updateAddressState = (field, value) => {\n    const { address } = this.state;\n    address[field] = value;\n    this.setState({ address });\n  };\n\n  hasAllParams(obj) {\n    return isEmpty(Object.keys(obj).filter(k => k == ''));\n  }\n\n  retailerMissingDefaultTailor() {\n    const { type, default_tailor_id } = this.state;\n    if (type === 'retailer' && default_tailor_id < 1) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  emptyParamsPresent = () => {\n    const store = this.state;\n    const { address } = store;\n    const missingStoreParams = !this.hasAllParams(store);\n    const missingAddressParams = !this.hasAllParams(address);\n    const missingDefaultTailor = !this.retailerMissingDefaultTailor();\n    return missingStoreParams && missingAddressParams && missingDefaultTailor;\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { setLoader, removeLoader, setGrowler } = this.props;\n    const missingParams = this.emptyParamsPresent();\n\n    if (!missingParams) {\n      const store = this.state;\n      setLoader();\n      createStore({ store })\n        .then(res => {\n          removeLoader();\n\n          const errors = res.data.body.errors;\n          if (isEmpty(errors)) {\n            this.setState(this.initialStateObject());\n\n            setGrowler({\n              kind: 'success',\n              message: 'New Store Created!',\n            });\n          } else {\n            if (errors['invalid_address']) {\n              setGrowler({\n                kind: 'warning',\n                message: 'Invalid Address! Check your inputs.',\n              });\n            }\n          }\n        })\n        .catch(err => console.log(err));\n    } else {\n      const errorString = 'Please enter all fields before submitting.';\n      setGrowler({ kind: 'warning', message: errorString });\n    }\n  };\n\n  render() {\n    const { companies, userRoles: { admin } } = this.props;\n    const {\n      company_id,\n      type,\n      name,\n      phone,\n      address: { street, street_two, city, state_province, zip_code },\n      default_tailor_id,\n    } = this.state;\n\n    const tailorId = default_tailor_id ? default_tailor_id : '';\n\n    const updateStoreState = this.updateStoreState;\n    const updateAddressState = this.updateAddressState;\n    const submit = e => this.handleSubmit(e);\n\n    if (isEmpty(companies)) {\n      return <div />;\n    } else {\n      return (\n        <div>\n          <form onSubmit={submit}>\n            <FormField\n              value={name}\n              fieldName={'name'}\n              title={'Name: '}\n              onChange={updateStoreState}\n            />\n\n            <FormField\n              value={phone}\n              fieldName={'phone'}\n              title={'Phone: '}\n              onChange={updateStoreState}\n            />\n\n            <FormField\n              value={street}\n              fieldName={'street'}\n              title={'Street:'}\n              onChange={updateAddressState}\n            />\n\n            <FormField\n              value={street_two}\n              fieldName={'street_two'}\n              title={'Unit:'}\n              onChange={updateAddressState}\n            />\n\n            <FormField\n              value={city}\n              fieldName={'city'}\n              title={'City:'}\n              onChange={updateAddressState}\n            />\n\n            <FormField\n              value={state_province}\n              fieldName={'state_province'}\n              title={'State:'}\n              onChange={updateAddressState}\n            />\n\n            <FormField\n              value={zip_code}\n              fieldName={'zip_code'}\n              title={'Zip:'}\n              onChange={updateAddressState}\n            />\n\n            <FormSelect\n              value={company_id}\n              options={companies}\n              fieldName={'company_id'}\n              title={'Company:'}\n              onChange={updateStoreState}\n            />\n\n            <FormSelect\n              value={type}\n              options={storeTypes}\n              fieldName={'type'}\n              title={'Store Type:'}\n              onChange={updateStoreState}\n            />\n\n            {this.renderTailorSelect(tailorId, admin)}\n\n            <input\n              type=\"submit\"\n              className=\"short-button\"\n              value=\"Create New Store\"\n            />\n          </form>\n        </div>\n      );\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(\n  WithSectionHeader(StoresNew)\n);\n\n\n\n// WEBPACK FOOTER //\n// ./client/components/stores/StoresNew.js","import React from 'react';\n\nconst FormField = props => {\n  const { title, value, fieldName, onChange, className, type } = props;\n  const inputType = type ? type : 'text';\n  return (\n    <div>\n      <label className=\"form-label\">{title}</label>\n      <br />\n      <input\n        type={inputType}\n        className={`form-input ${className}`}\n        size=\"50\"\n        value={value}\n        onChange={e => onChange(fieldName, e.target.value)}\n      />\n      <br />\n      <br />\n    </div>\n  );\n};\n\nexport default FormField;\n\n\n\n// WEBPACK FOOTER //\n// ./client/components/FormField.js","import React from 'react';\n\nconst addPleaseSelect = options => {\n  return [{ id: '', name: 'Please Select' }].concat(options);\n};\n\nconst FormSelect = props => {\n  const selectOptions = addPleaseSelect(props.options);\n  return (\n    <div>\n      <label>{props.title}</label>\n      <br />\n      <select\n        value={props.value}\n        onChange={e => props.onChange(props.fieldName, e.target.value)}\n      >\n        {renderOptions(selectOptions)}\n      </select>\n      <br />\n      <br />\n    </div>\n  );\n};\n\nconst renderOptions = options => {\n  return options.map((option, index) => {\n    return (\n      <option key={index} value={option.id}>\n        {option.name}\n      </option>\n    );\n  });\n};\n\nexport default FormSelect;\n\n\n\n// WEBPACK FOOTER //\n// ./client/components/FormSelect.js","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport isEmpty from 'lodash/isEmpty';\nimport PropTypes from 'prop-types';\n\nimport { getTailorList } from '../../../actions';\n\nimport FormSelect from '../../FormSelect';\n\nconst mapStateToProps = store => {\n  return {\n    tailors: store.tailorList,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({ getTailorList }, dispatch);\n};\n\nclass SelectTailor extends Component {\n  static propTypes = {\n    tailors: PropTypes.array.isRequired, // mapStateToProps\n    getTailorList: PropTypes.func.isRequired, // mapDispatchToProps\n    onChange: PropTypes.func.isRequired, // parentComponent\n    provider_id: PropTypes.string, // parentComponent\n  };\n\n  componentDidMount() {\n    this.props.getTailorList().catch(err => console.log(err));\n  }\n\n  render() {\n    const {\n      tailors,\n      onChange,\n      tailorId,\n      handleSubmit,\n      fieldName = 'provider_id',\n      title = 'Tailor Shop:',\n      headerText = 'Select Tailor',\n    } = this.props;\n\n    if (isEmpty(tailors)) {\n      return <div />;\n    }\n\n    return (\n      <div className={'SelectTailor'}>\n        <h3>{headerText}</h3>\n        <FormSelect\n          value={tailorId}\n          options={tailors}\n          fieldName={fieldName}\n          title={title}\n          onChange={onChange}\n        />\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectTailor);\n\n\n\n// WEBPACK FOOTER //\n// ./client/components/orders/orderForms/SelectTailor.js"],"sourceRoot":""}