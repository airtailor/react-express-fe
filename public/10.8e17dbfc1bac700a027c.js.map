{"version":3,"sources":["webpack:///./client/components/orders/OrdersEdit.js","webpack:///./client/components/FormField.js?991d***","webpack:///./client/components/FormSelect.js?638f***","webpack:///./client/components/Checkbox.js?8764*","webpack:///./client/components/orders/orderForms/SelectTailor.js?a41b*"],"names":["mapStateToProps","order","store","currentOrder","currentStore","tailors","tailorList","mapDispatchToProps","getTailorList","getCurrentOrder","updateOrder","setLoader","removeLoader","setGrowler","dispatch","OrdersEdit","props","updateState","field","value","setState","state","orderId","match","params","order_id","storeId","id","then","catch","console","log","err","e","preventDefault","kind","message","submit","handleSubmit","headerText","fulfilled","arrived","customer","firstName","first_name","lastName","last_name","total","weight","tailorId","provider_id","backLink","propTypes","object","isRequired","array","func","FormField","title","fieldName","onChange","className","type","inputType","target","addPleaseSelect","name","concat","options","FormSelect","selectOptions","renderOptions","map","option","index","Checkbox","checked","text","labelClass","display","SelectTailor","string"],"mappings":"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","file":"10.8e17dbfc1bac700a027c.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport isEmpty from 'lodash/isEmpty';\nimport PropTypes from 'prop-types';\n\nimport FormSelect from '../FormSelect';\nimport FormField from '../FormField';\nimport {\n  getCurrentOrder,\n  updateOrder,\n  getTailorList,\n  setLoader,\n  removeLoader,\n  setGrowler,\n} from '../../actions';\n\nimport SelectTailor from './orderForms/SelectTailor';\nimport SectionHeader from '../SectionHeader';\nimport Checkbox from '../Checkbox';\n\nconst mapStateToProps = store => {\n  return {\n    order: store.currentOrder,\n    store: store.currentStore,\n    tailors: store.tailorList,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators(\n    {\n      getTailorList,\n      getCurrentOrder,\n      updateOrder,\n      setLoader,\n      removeLoader,\n      setGrowler,\n    },\n    dispatch\n  );\n};\n\nclass OrdersEdit extends Component {\n  static propTypes = {\n    order: PropTypes.object.isRequired, // mapStateToProps\n    tailors: PropTypes.array.isRequired, // mapStateToProps\n    getTailorList: PropTypes.func.isRequired, // mapDispatchToProps\n    getCurrentOrder: PropTypes.func.isRequired, // mapDispatchToProps\n    updateOrder: PropTypes.func.isRequired, // mapDispatchToProps\n    setLoader: PropTypes.func.isRequired, // mapDispatchToProps\n    removeLoader: PropTypes.func.isRequired, // mapDispatchToProps\n    setGrowler: PropTypes.func.isRequired, // mapDispatchToProps\n  };\n\n  constructor(props) {\n    super();\n\n    this.state = props.order;\n  }\n\n  componentDidMount() {\n    const { order } = this.props;\n    if (isEmpty(order)) {\n      const {\n        match: { params: { order_id: orderId } },\n        store: { id: storeId },\n      } = this.props;\n\n      this.props.setLoader();\n      this.props\n        .getCurrentOrder(storeId, orderId)\n        .then(() => {\n          this.props.removeLoader();\n\n          const { order } = this.props;\n          this.setState(order);\n        })\n        .catch(err => console.log(err));\n    }\n  }\n\n  updateState = (field, value) => {\n    this.setState({ [field]: value });\n  };\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.props\n      .updateOrder({ order: this.state })\n      .then(res => {\n        this.props.setGrowler({ kind: 'success', message: 'Order updated!' });\n      })\n      .catch(err => console.log('errr', err));\n  }\n\n  render() {\n    const order = this.state;\n    const submit = e => this.handleSubmit(e);\n    const updateState = this.updateState;\n\n    let headerText = `Orders / Edit`;\n    if (isEmpty(order)) {\n      return <SectionHeader text={headerText} />;\n    } else {\n      const {\n        id,\n        fulfilled,\n        arrived,\n        customer: { first_name: firstName, last_name: lastName },\n        total,\n        weight,\n        provider_id: tailorId,\n      } = order;\n\n      headerText = `Orders / Edit / ${id}`;\n      const backLink = `/orders/${this.state.id}`;\n\n      return (\n        <div>\n          <SectionHeader text={headerText} />\n          <Link to={backLink}>Back</Link>\n          <form onSubmit={submit}>\n            <FormField\n              value={firstName}\n              fieldName={'first_name'}\n              title={'First Name:'}\n              onChange={() => {}}\n            />\n\n            <FormField\n              value={lastName}\n              fieldName={'last_name'}\n              title={'Last Name:'}\n              onChange={() => {}}\n            />\n\n            <Checkbox\n              checked={arrived}\n              type=\"checkbox\"\n              text={'Arrived?'}\n              name={'arrived'}\n              fieldName=\"arrived\"\n              onChange={updateState}\n            />\n\n            <Checkbox\n              checked={fulfilled}\n              type=\"checkbox\"\n              text={'Fulfilled?'}\n              name={'fulfilled'}\n              fieldName=\"fulfilled\"\n              onChange={updateState}\n            />\n\n            <FormField\n              value={total}\n              fieldName={'total'}\n              title={'Total: $'}\n              onChange={updateState}\n            />\n\n            <FormField\n              value={weight}\n              fieldName={'weight'}\n              title={'Weight (grams):'}\n              onChange={updateState}\n            />\n\n            <SelectTailor tailorId={tailorId} onChange={this.updateState} />\n\n            <FormField\n              value={total}\n              fieldName={'total'}\n              title={'Total:'}\n              onChange={updateState}\n            />\n\n            <input type=\"submit\" className=\"short-button\" value=\"Update\" />\n          </form>\n        </div>\n      );\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrdersEdit);\n\n\n\n// WEBPACK FOOTER //\n// ./client/components/orders/OrdersEdit.js","import React from 'react';\n\nconst FormField = props => {\n  const { title, value, fieldName, onChange, className, type } = props;\n  const inputType = type ? type : 'text';\n  return (\n    <div>\n      <label className=\"form-label\">{title}</label>\n      <br />\n      <input\n        type={inputType}\n        className={`form-input ${className}`}\n        size=\"50\"\n        value={value}\n        onChange={e => onChange(fieldName, e.target.value)}\n      />\n      <br />\n      <br />\n    </div>\n  );\n};\n\nexport default FormField;\n\n\n\n// WEBPACK FOOTER //\n// ./client/components/FormField.js","import React from 'react';\n\nconst addPleaseSelect = options => {\n  return [{ id: '', name: 'Please Select' }].concat(options);\n};\n\nconst FormSelect = props => {\n  const selectOptions = addPleaseSelect(props.options);\n  return (\n    <div>\n      <label>{props.title}</label>\n      <br />\n      <select\n        value={props.value}\n        onChange={e => props.onChange(props.fieldName, e.target.value)}\n      >\n        {renderOptions(selectOptions)}\n      </select>\n      <br />\n      <br />\n    </div>\n  );\n};\n\nconst renderOptions = options => {\n  return options.map((option, index) => {\n    return (\n      <option key={index} value={option.id}>\n        {option.name}\n      </option>\n    );\n  });\n};\n\nexport default FormSelect;\n\n\n\n// WEBPACK FOOTER //\n// ./client/components/FormSelect.js","import React from 'react';\n\nconst Checkbox = props => {\n  const { onChange, checked, fieldName, text, name, labelClass } = props;\n  if (!fieldName) {\n    return (\n      <div style={{ display: 'inline' }}>\n        <input\n          type=\"checkbox\"\n          id={`${name}-check`}\n          name={name}\n          checked={checked}\n          onChange={onChange}\n        />\n\n        <label\n          htmlFor={`${name}-check`}\n          className={`checkbox-label ${labelClass}`}\n        >\n          <span />\n          {text}\n        </label>\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ display: 'inline' }}>\n      <input\n        type=\"checkbox\"\n        id={`${name}-check`}\n        name={name}\n        checked={checked}\n        onChange={() => onChange(fieldName, !checked)}\n      />\n\n      <label htmlFor={`${name}-check`} className=\"checkbox-label\">\n        <span />\n        {text}\n      </label>\n    </div>\n  );\n};\n\nexport default Checkbox;\n\n\n\n// WEBPACK FOOTER //\n// ./client/components/Checkbox.js","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport isEmpty from 'lodash/isEmpty';\nimport PropTypes from 'prop-types';\n\nimport { getTailorList } from '../../../actions';\n\nimport FormSelect from '../../FormSelect';\n\nconst mapStateToProps = store => {\n  return {\n    tailors: store.tailorList,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({ getTailorList }, dispatch);\n};\n\nclass SelectTailor extends Component {\n  static propTypes = {\n    tailors: PropTypes.array.isRequired, // mapStateToProps\n    getTailorList: PropTypes.func.isRequired, // mapDispatchToProps\n    onChange: PropTypes.func.isRequired, // parentComponent\n    provider_id: PropTypes.string, // parentComponent\n  };\n\n  componentDidMount() {\n    this.props.getTailorList().catch(err => console.log(err));\n  }\n\n  render() {\n    const {\n      tailors,\n      onChange,\n      tailorId,\n      handleSubmit,\n      fieldName = 'provider_id',\n      title = 'Tailor Shop:',\n      headerText = 'Select Tailor',\n    } = this.props;\n\n    if (isEmpty(tailors)) {\n      return <div />;\n    }\n\n    return (\n      <div className={'SelectTailor'}>\n        <h3>{headerText}</h3>\n        <FormSelect\n          value={tailorId}\n          options={tailors}\n          fieldName={fieldName}\n          title={title}\n          onChange={onChange}\n        />\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectTailor);\n\n\n\n// WEBPACK FOOTER //\n// ./client/components/orders/orderForms/SelectTailor.js"],"sourceRoot":""}